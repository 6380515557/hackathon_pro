{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kiruba\\\\OneDrive\\\\Desktop\\\\kiruba\\\\hackathon_pro\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react'; // Make sure useState and useEffect are imported\nimport './App.css'; // Keep the default styling (or remove if you're not using it)\n\n// Ensure your App component is defined as a function\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [backendMessage, setBackendMessage] = useState('Loading message from backend...');\n  const [error, setError] = useState(null);\n\n  // Define your backend URL\n  // Make sure your FastAPI backend is running on http://localhost:8000\n  const BACKEND_URL = 'http://localhost:8000';\n  useEffect(() => {\n    const fetchBackendMessage = async () => {\n      try {\n        // Make a GET request to your FastAPI backend's root endpoint\n        const response = await fetch(BACKEND_URL);\n\n        // Check if the response was successful\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        setBackendMessage(data.message); // Assuming your root endpoint returns {\"message\": \"...\"}\n      } catch (e) {\n        console.error(\"Failed to fetch backend message:\", e);\n        setError(\"Failed to connect to backend or retrieve message: \" + e.message);\n      }\n    };\n    fetchBackendMessage();\n  }, []); // Empty dependency array means this effect runs once after the initial render\n\n  // The return statement MUST be inside the function\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Manufacturing Operations Frontend\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This is your React frontend.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Backend Status:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), error ? /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'red'\n        },\n        children: [\"Error: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Message from FastAPI Backend: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: backendMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 44\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Remember to keep your FastAPI backend running on\", ' ', /*#__PURE__*/_jsxDEV(\"a\", {\n          href: BACKEND_URL,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: BACKEND_URL\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), ' ', \"in a separate terminal.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"You can explore the backend API documentation at\", ' ', /*#__PURE__*/_jsxDEV(\"a\", {\n          href: `${BACKEND_URL}/docs`,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: [BACKEND_URL, \"/docs\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)\n  }, void 0, false); // Added semicolon here as a good practice\n}\n_s(App, \"dOnhhSLwlh32+oQGALQ1Fjj47go=\");\n_c = App;\nexport default App; // Export your App component\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","backendMessage","setBackendMessage","error","setError","BACKEND_URL","fetchBackendMessage","response","fetch","ok","Error","status","data","json","message","e","console","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","href","target","rel","_c","$RefreshReg$"],"sources":["C:/Users/kiruba/OneDrive/Desktop/kiruba/hackathon_pro/frontend/src/App.js"],"sourcesContent":["import { useState, useEffect } from 'react'; // Make sure useState and useEffect are imported\r\nimport './App.css'; // Keep the default styling (or remove if you're not using it)\r\n\r\n// Ensure your App component is defined as a function\r\nfunction App() {\r\n  const [backendMessage, setBackendMessage] = useState('Loading message from backend...');\r\n  const [error, setError] = useState(null);\r\n\r\n  // Define your backend URL\r\n  // Make sure your FastAPI backend is running on http://localhost:8000\r\n  const BACKEND_URL = 'http://localhost:8000';\r\n\r\n  useEffect(() => {\r\n    const fetchBackendMessage = async () => {\r\n      try {\r\n        // Make a GET request to your FastAPI backend's root endpoint\r\n        const response = await fetch(BACKEND_URL);\r\n\r\n        // Check if the response was successful\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        setBackendMessage(data.message); // Assuming your root endpoint returns {\"message\": \"...\"}\r\n\r\n      } catch (e) {\r\n        console.error(\"Failed to fetch backend message:\", e);\r\n        setError(\"Failed to connect to backend or retrieve message: \" + e.message);\r\n      }\r\n    };\r\n\r\n    fetchBackendMessage();\r\n  }, []); // Empty dependency array means this effect runs once after the initial render\r\n\r\n  // The return statement MUST be inside the function\r\n  return (\r\n    <>\r\n      <div>\r\n        <h1>Manufacturing Operations Frontend</h1>\r\n        <p>This is your React frontend.</p>\r\n\r\n        <h2>Backend Status:</h2>\r\n        {error ? (\r\n          <p style={{ color: 'red' }}>Error: {error}</p>\r\n        ) : (\r\n          <p>Message from FastAPI Backend: <strong>{backendMessage}</strong></p>\r\n        )}\r\n\r\n        <p>\r\n          Remember to keep your FastAPI backend running on{' '}\r\n          <a href={BACKEND_URL} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            {BACKEND_URL}\r\n          </a>{' '}\r\n          in a separate terminal.\r\n        </p>\r\n        <p>\r\n          You can explore the backend API documentation at{' '}\r\n          <a href={`${BACKEND_URL}/docs`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            {BACKEND_URL}/docs\r\n          </a>\r\n          .\r\n        </p>\r\n      </div>\r\n    </>\r\n  ); // Added semicolon here as a good practice\r\n}\r\n\r\nexport default App; // Export your App component"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO,CAAC,CAAC;AAC7C,OAAO,WAAW,CAAC,CAAC;;AAEpB;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACA,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGT,QAAQ,CAAC,iCAAiC,CAAC;EACvF,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACA;EACA,MAAMY,WAAW,GAAG,uBAAuB;EAE3CX,SAAS,CAAC,MAAM;IACd,MAAMY,mBAAmB,GAAG,MAAAA,CAAA,KAAY;MACtC,IAAI;QACF;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,WAAW,CAAC;;QAEzC;QACA,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;QAC3D;QAEA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;QAClCX,iBAAiB,CAACU,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC;MAEnC,CAAC,CAAC,OAAOC,CAAC,EAAE;QACVC,OAAO,CAACb,KAAK,CAAC,kCAAkC,EAAEY,CAAC,CAAC;QACpDX,QAAQ,CAAC,oDAAoD,GAAGW,CAAC,CAACD,OAAO,CAAC;MAC5E;IACF,CAAC;IAEDR,mBAAmB,CAAC,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACA,oBACEV,OAAA,CAAAE,SAAA;IAAAmB,QAAA,eACErB,OAAA;MAAAqB,QAAA,gBACErB,OAAA;QAAAqB,QAAA,EAAI;MAAiC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC1CzB,OAAA;QAAAqB,QAAA,EAAG;MAA4B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAEnCzB,OAAA;QAAAqB,QAAA,EAAI;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACvBlB,KAAK,gBACJP,OAAA;QAAG0B,KAAK,EAAE;UAAEC,KAAK,EAAE;QAAM,CAAE;QAAAN,QAAA,GAAC,SAAO,EAACd,KAAK;MAAA;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,gBAE9CzB,OAAA;QAAAqB,QAAA,GAAG,gCAA8B,eAAArB,OAAA;UAAAqB,QAAA,EAAShB;QAAc;UAAAiB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAS,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CACtE,eAEDzB,OAAA;QAAAqB,QAAA,GAAG,kDAC+C,EAAC,GAAG,eACpDrB,OAAA;UAAG4B,IAAI,EAAEnB,WAAY;UAACoB,MAAM,EAAC,QAAQ;UAACC,GAAG,EAAC,qBAAqB;UAAAT,QAAA,EAC5DZ;QAAW;UAAAa,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACX,CAAC,EAAC,GAAG,EAAC,yBAEX;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACJzB,OAAA;QAAAqB,QAAA,GAAG,kDAC+C,EAAC,GAAG,eACpDrB,OAAA;UAAG4B,IAAI,EAAE,GAAGnB,WAAW,OAAQ;UAACoB,MAAM,EAAC,QAAQ;UAACC,GAAG,EAAC,qBAAqB;UAAAT,QAAA,GACtEZ,WAAW,EAAC,OACf;QAAA;UAAAa,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,KAEN;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD;EAAC,gBACN,CAAC,CACH,CAAC;AACL;AAACrB,EAAA,CA9DQD,GAAG;AAAA4B,EAAA,GAAH5B,GAAG;AAgEZ,eAAeA,GAAG,CAAC,CAAC;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}